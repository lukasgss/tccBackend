// <auto-generated />
using System;
using Infrastructure.Persistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240319051921_AddMultipleUserPreferencesFilters")]
    partial class AddMultipleUserPreferencesFilters
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "unaccent");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdoptionUserPreferencesBreed", b =>
                {
                    b.Property<Guid>("AdoptionUserPreferencesId")
                        .HasColumnType("uuid");

                    b.Property<int>("BreedsId")
                        .HasColumnType("integer");

                    b.HasKey("AdoptionUserPreferencesId", "BreedsId");

                    b.HasIndex("BreedsId");

                    b.ToTable("AdoptionUserPreferencesBreed");
                });

            modelBuilder.Entity("AdoptionUserPreferencesColor", b =>
                {
                    b.Property<Guid>("AdoptionUserPreferencesId")
                        .HasColumnType("uuid");

                    b.Property<int>("ColorsId")
                        .HasColumnType("integer");

                    b.HasKey("AdoptionUserPreferencesId", "ColorsId");

                    b.HasIndex("ColorsId");

                    b.ToTable("AdoptionUserPreferencesColor");
                });

            modelBuilder.Entity("AdoptionUserPreferencesSpecies", b =>
                {
                    b.Property<Guid>("AdoptionUserPreferencesId")
                        .HasColumnType("uuid");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("AdoptionUserPreferencesId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("AdoptionUserPreferencesSpecies");
                });

            modelBuilder.Entity("BreedFoundAnimalUserPreferences", b =>
                {
                    b.Property<int>("BreedsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FoundAnimalUserPreferencesId")
                        .HasColumnType("uuid");

                    b.HasKey("BreedsId", "FoundAnimalUserPreferencesId");

                    b.HasIndex("FoundAnimalUserPreferencesId");

                    b.ToTable("BreedFoundAnimalUserPreferences");
                });

            modelBuilder.Entity("ColorFoundAnimalAlert", b =>
                {
                    b.Property<int>("ColorsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FoundAnimalAlertsId")
                        .HasColumnType("uuid");

                    b.HasKey("ColorsId", "FoundAnimalAlertsId");

                    b.HasIndex("FoundAnimalAlertsId");

                    b.ToTable("ColorFoundAnimalAlert");
                });

            modelBuilder.Entity("ColorFoundAnimalUserPreferences", b =>
                {
                    b.Property<int>("ColorsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FoundAnimalUserPreferencesId")
                        .HasColumnType("uuid");

                    b.HasKey("ColorsId", "FoundAnimalUserPreferencesId");

                    b.HasIndex("FoundAnimalUserPreferencesId");

                    b.ToTable("ColorFoundAnimalUserPreferences");
                });

            modelBuilder.Entity("ColorPet", b =>
                {
                    b.Property<int>("ColorsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PetsId")
                        .HasColumnType("uuid");

                    b.HasKey("ColorsId", "PetsId");

                    b.HasIndex("PetsId");

                    b.ToTable("ColorPet");
                });

            modelBuilder.Entity("Domain.Entities.AdoptionAlertComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdoptionAlertId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdoptionAlertId");

                    b.HasIndex("UserId");

                    b.ToTable("AdoptionAlertComments");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.AdoptionAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("AdoptionDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<bool>("OnlyForScreenedProperties")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("UserId");

                    b.ToTable("AdoptionAlerts");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.FoundAnimalAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BreedId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly?>("RecoveryDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("FoundAnimalAlerts", t =>
                        {
                            t.HasCheckConstraint("CK_FoundAnimalAlerts_Age_Enum", "\"Age\" BETWEEN 1 AND 4");

                            t.HasCheckConstraint("CK_FoundAnimalAlerts_Gender_Enum", "\"Gender\" BETWEEN 0 AND 2");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Alerts.MissingAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("RecoveryDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("UserId");

                    b.ToTable("MissingAlerts");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.Notifications.FoundAnimalAlertNotifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("FoundAnimalAlertId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeStampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FoundAnimalAlertId");

                    b.ToTable("FoundAnimalAlertNotifications");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserFavorites.AdoptionFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdoptionAlertId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdoptionAlertId");

                    b.HasIndex("UserId");

                    b.ToTable("AdoptionFavorites");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int[]>("Ages")
                        .HasColumnType("integer[]");

                    b.Property<int[]>("Genders")
                        .HasColumnType("integer[]");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.Property<double?>("RadiusDistanceInKm")
                        .HasColumnType("double precision");

                    b.Property<int[]>("Sizes")
                        .HasColumnType("integer[]");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AdoptionUserPreferences");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int[]>("Ages")
                        .HasColumnType("integer[]");

                    b.Property<int[]>("Genders")
                        .HasColumnType("integer[]");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.Property<double?>("RadiusDistanceInKm")
                        .HasColumnType("double precision");

                    b.Property<int[]>("Sizes")
                        .HasColumnType("integer[]");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("FoundAnimalUserPreferences");
                });

            modelBuilder.Entity("Domain.Entities.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Border Collie",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pastor Alemão",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pug",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dachshund",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Golden",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Siamês",
                            SpeciesId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HexCode = "#FFFFFF",
                            Name = "Branco"
                        },
                        new
                        {
                            Id = 2,
                            HexCode = "#181818",
                            Name = "Preto"
                        },
                        new
                        {
                            Id = 3,
                            HexCode = "#35281E",
                            Name = "Marrom"
                        });
                });

            modelBuilder.Entity("Domain.Entities.MissingAlertComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MissingAlertId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MissingAlertId");

                    b.HasIndex("UserId");

                    b.ToTable("MissingAlertComments");
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("BreedId")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Observations")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("Pets", t =>
                        {
                            t.HasCheckConstraint("CK_Pets_Age_Enum", "\"Age\" BETWEEN 1 AND 4");

                            t.HasCheckConstraint("CK_Pets_Gender_Enum", "\"Gender\" BETWEEN 0 AND 2");

                            t.HasCheckConstraint("CK_Pets_Size_Enum", "\"Size\" BETWEEN 1 AND 4");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cachorro"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gato"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("HasBeenDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasBeenEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasBeenRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeStampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("Domain.Entities.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("Domain.ValueObjects.FoundAnimalAlertImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("FoundAnimalAlertId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FoundAnimalAlertId");

                    b.ToTable("FoundAnimalAlertImages");
                });

            modelBuilder.Entity("Domain.ValueObjects.PetImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("PetImage");
                });

            modelBuilder.Entity("FoundAnimalAlertNotificationsUser", b =>
                {
                    b.Property<long>("FoundAnimalAlertNotificationsId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("FoundAnimalAlertNotificationsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FoundAnimalAlertNotificationsUser");
                });

            modelBuilder.Entity("FoundAnimalUserPreferencesSpecies", b =>
                {
                    b.Property<Guid>("FoundAnimalUserPreferencesId")
                        .HasColumnType("uuid");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("FoundAnimalUserPreferencesId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("FoundAnimalUserPreferencesSpecies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PetVaccine", b =>
                {
                    b.Property<Guid>("PetsId")
                        .HasColumnType("uuid");

                    b.Property<int>("VaccinesId")
                        .HasColumnType("integer");

                    b.HasKey("PetsId", "VaccinesId");

                    b.HasIndex("VaccinesId");

                    b.ToTable("PetVaccine");
                });

            modelBuilder.Entity("SpeciesVaccine", b =>
                {
                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<int>("VaccinesId")
                        .HasColumnType("integer");

                    b.HasKey("SpeciesId", "VaccinesId");

                    b.HasIndex("VaccinesId");

                    b.ToTable("SpeciesVaccine");
                });

            modelBuilder.Entity("AdoptionUserPreferencesBreed", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("AdoptionUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Breed", null)
                        .WithMany()
                        .HasForeignKey("BreedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdoptionUserPreferencesColor", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("AdoptionUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdoptionUserPreferencesSpecies", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("AdoptionUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Species", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BreedFoundAnimalUserPreferences", b =>
                {
                    b.HasOne("Domain.Entities.Breed", null)
                        .WithMany()
                        .HasForeignKey("BreedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("FoundAnimalUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ColorFoundAnimalAlert", b =>
                {
                    b.HasOne("Domain.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Alerts.FoundAnimalAlert", null)
                        .WithMany()
                        .HasForeignKey("FoundAnimalAlertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ColorFoundAnimalUserPreferences", b =>
                {
                    b.HasOne("Domain.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("FoundAnimalUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ColorPet", b =>
                {
                    b.HasOne("Domain.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pet", null)
                        .WithMany()
                        .HasForeignKey("PetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AdoptionAlertComment", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.AdoptionAlert", "AdoptionAlert")
                        .WithMany()
                        .HasForeignKey("AdoptionAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdoptionAlert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.AdoptionAlert", b =>
                {
                    b.HasOne("Domain.Entities.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.FoundAnimalAlert", b =>
                {
                    b.HasOne("Domain.Entities.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedId");

                    b.HasOne("Domain.Entities.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Species");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.MissingAlert", b =>
                {
                    b.HasOne("Domain.Entities.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.Notifications.FoundAnimalAlertNotifications", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.FoundAnimalAlert", "FoundAnimalAlert")
                        .WithMany("FoundAnimalAlertNotifications")
                        .HasForeignKey("FoundAnimalAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoundAnimalAlert");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserFavorites.AdoptionFavorite", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.AdoptionAlert", "AdoptionAlert")
                        .WithMany("AdoptionFavorites")
                        .HasForeignKey("AdoptionAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("AdoptionFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdoptionAlert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("AdoptionUserPreferences")
                        .HasForeignKey("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("FoundAnimalUserPreferences")
                        .HasForeignKey("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Breed", b =>
                {
                    b.HasOne("Domain.Entities.Species", "Species")
                        .WithMany("Breeds")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("Domain.Entities.MissingAlertComment", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.MissingAlert", "MissingAlert")
                        .WithMany()
                        .HasForeignKey("MissingAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("MissingAlertComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MissingAlert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.HasOne("Domain.Entities.Breed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Species", "Species")
                        .WithMany("Pets")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Owner");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("Domain.Entities.UserMessage", b =>
                {
                    b.HasOne("Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.ValueObjects.FoundAnimalAlertImage", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.FoundAnimalAlert", "FoundAnimalAlert")
                        .WithMany("Images")
                        .HasForeignKey("FoundAnimalAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoundAnimalAlert");
                });

            modelBuilder.Entity("Domain.ValueObjects.PetImage", b =>
                {
                    b.HasOne("Domain.Entities.Pet", "Pet")
                        .WithMany("Images")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("FoundAnimalAlertNotificationsUser", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.Notifications.FoundAnimalAlertNotifications", null)
                        .WithMany()
                        .HasForeignKey("FoundAnimalAlertNotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoundAnimalUserPreferencesSpecies", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("FoundAnimalUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Species", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetVaccine", b =>
                {
                    b.HasOne("Domain.Entities.Pet", null)
                        .WithMany()
                        .HasForeignKey("PetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vaccine", null)
                        .WithMany()
                        .HasForeignKey("VaccinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpeciesVaccine", b =>
                {
                    b.HasOne("Domain.Entities.Species", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vaccine", null)
                        .WithMany()
                        .HasForeignKey("VaccinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Alerts.AdoptionAlert", b =>
                {
                    b.Navigation("AdoptionFavorites");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.FoundAnimalAlert", b =>
                {
                    b.Navigation("FoundAnimalAlertNotifications");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Domain.Entities.Breed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Domain.Entities.Species", b =>
                {
                    b.Navigation("Breeds");

                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("AdoptionFavorites");

                    b.Navigation("AdoptionUserPreferences");

                    b.Navigation("FoundAnimalUserPreferences");

                    b.Navigation("MissingAlertComments");
                });
#pragma warning restore 612, 618
        }
    }
}
