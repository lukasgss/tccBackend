// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Persistence.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240927213612_AddAdoptionReports")]
    partial class AddAdoptionReports
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "unaccent");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdoptionUserPreferencesBreed", b =>
                {
                    b.Property<Guid>("AdoptionUserPreferencesId")
                        .HasColumnType("uuid");

                    b.Property<int>("BreedsId")
                        .HasColumnType("integer");

                    b.HasKey("AdoptionUserPreferencesId", "BreedsId");

                    b.HasIndex("BreedsId");

                    b.ToTable("AdoptionUserPreferencesBreed");
                });

            modelBuilder.Entity("AdoptionUserPreferencesColor", b =>
                {
                    b.Property<Guid>("AdoptionUserPreferencesId")
                        .HasColumnType("uuid");

                    b.Property<int>("ColorsId")
                        .HasColumnType("integer");

                    b.HasKey("AdoptionUserPreferencesId", "ColorsId");

                    b.HasIndex("ColorsId");

                    b.ToTable("AdoptionUserPreferencesColor");
                });

            modelBuilder.Entity("AdoptionUserPreferencesSpecies", b =>
                {
                    b.Property<Guid>("AdoptionUserPreferencesId")
                        .HasColumnType("uuid");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("AdoptionUserPreferencesId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("AdoptionUserPreferencesSpecies");
                });

            modelBuilder.Entity("BreedFoundAnimalUserPreferences", b =>
                {
                    b.Property<int>("BreedsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FoundAnimalUserPreferencesId")
                        .HasColumnType("uuid");

                    b.HasKey("BreedsId", "FoundAnimalUserPreferencesId");

                    b.HasIndex("FoundAnimalUserPreferencesId");

                    b.ToTable("BreedFoundAnimalUserPreferences");
                });

            modelBuilder.Entity("ColorFoundAnimalAlert", b =>
                {
                    b.Property<int>("ColorsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FoundAnimalAlertsId")
                        .HasColumnType("uuid");

                    b.HasKey("ColorsId", "FoundAnimalAlertsId");

                    b.HasIndex("FoundAnimalAlertsId");

                    b.ToTable("ColorFoundAnimalAlert");
                });

            modelBuilder.Entity("ColorFoundAnimalUserPreferences", b =>
                {
                    b.Property<int>("ColorsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FoundAnimalUserPreferencesId")
                        .HasColumnType("uuid");

                    b.HasKey("ColorsId", "FoundAnimalUserPreferencesId");

                    b.HasIndex("FoundAnimalUserPreferencesId");

                    b.ToTable("ColorFoundAnimalUserPreferences");
                });

            modelBuilder.Entity("ColorPet", b =>
                {
                    b.Property<int>("ColorsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PetsId")
                        .HasColumnType("uuid");

                    b.HasKey("ColorsId", "PetsId");

                    b.HasIndex("PetsId");

                    b.ToTable("ColorPet");
                });

            modelBuilder.Entity("Domain.Entities.AdoptionAlertComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdoptionAlertId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdoptionAlertId");

                    b.HasIndex("UserId");

                    b.ToTable("AdoptionAlertComments");
                });

            modelBuilder.Entity("Domain.Entities.AdoptionReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RejectedReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("AdoptionReports", null, t =>
                        {
                            t.HasCheckConstraint("CK_AdoptionReports_Status_Enum", "\"Status\" BETWEEN 1 AND 4");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Alerts.AdoptionAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("AdoptionDate")
                        .HasColumnType("date");

                    b.Property<List<string>>("AdoptionRestrictions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PetId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("AdoptionAlerts");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.FoundAnimalAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BreedId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly?>("RecoveryDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("FoundAnimalAlerts", t =>
                        {
                            t.HasCheckConstraint("CK_FoundAnimalAlerts_Age_Enum", "\"Age\" BETWEEN 1 AND 4");

                            t.HasCheckConstraint("CK_FoundAnimalAlerts_Gender_Enum", "\"Gender\" BETWEEN 0 AND 2");

                            t.HasCheckConstraint("CK_FoundAnimalAlerts_Size_Enum", "\"Size\" BETWEEN 1 AND 4");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Alerts.MissingAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("RecoveryDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("UserId");

                    b.ToTable("MissingAlerts");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.Notifications.FoundAnimalAlertNotifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("FoundAnimalAlertId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeStampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FoundAnimalAlertId");

                    b.ToTable("FoundAnimalAlertNotifications");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserFavorites.AdoptionFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdoptionAlertId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdoptionAlertId");

                    b.HasIndex("UserId");

                    b.ToTable("AdoptionFavorites");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int[]>("Ages")
                        .HasColumnType("integer[]");

                    b.Property<int[]>("Genders")
                        .HasColumnType("integer[]");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.Property<double?>("RadiusDistanceInKm")
                        .HasColumnType("double precision");

                    b.Property<int[]>("Sizes")
                        .HasColumnType("integer[]");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AdoptionUserPreferences");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int[]>("Ages")
                        .HasColumnType("integer[]");

                    b.Property<int[]>("Genders")
                        .HasColumnType("integer[]");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.Property<double?>("RadiusDistanceInKm")
                        .HasColumnType("double precision");

                    b.Property<int[]>("Sizes")
                        .HasColumnType("integer[]");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("FoundAnimalUserPreferences");
                });

            modelBuilder.Entity("Domain.Entities.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Affenpinscher",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Galgo Afegão",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Airedale Terrier",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Akita",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Malamute do Alasca",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bulldog Americano",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pit Bull Terrier Americano",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Staffordshire Terrier Americano",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Boiadeiro Australiano",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pastor Australiano",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Terrier Australiano",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 12,
                            Name = "Basenji",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Basset Hound",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Beagle",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "Bearded Collie",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 16,
                            Name = "Bedlington Terrier",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 17,
                            Name = "Boiadeiro Bernês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 18,
                            Name = "Bichon Frisé",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 19,
                            Name = "Bloodhound",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 20,
                            Name = "Border Collie",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 21,
                            Name = "Border Terrier",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 22,
                            Name = "Borzoi",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 23,
                            Name = "Boston Terrier",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 24,
                            Name = "Boxer",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 25,
                            Name = "Spaniel Boykin",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 26,
                            Name = "Briard",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 27,
                            Name = "Bretão",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 28,
                            Name = "Griffon de Bruxelas",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 29,
                            Name = "Bull Terrier",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 30,
                            Name = "Bulldog",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 31,
                            Name = "Bullmastiff",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 32,
                            Name = "Cairn Terrier",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 33,
                            Name = "Cane Corso",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 34,
                            Name = "Cavalier King Charles Spaniel",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 35,
                            Name = "Retriever de Chesapeake Bay",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 36,
                            Name = "Chihuahua",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 37,
                            Name = "Cão de Crista Chinês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 38,
                            Name = "Chow Chow",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 39,
                            Name = "Clumber Spaniel",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 40,
                            Name = "Cocker Spaniel",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 41,
                            Name = "Collie",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 42,
                            Name = "Coonhound",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 43,
                            Name = "Corgi",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 44,
                            Name = "Coton de Tulear",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 45,
                            Name = "Dachshund",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 46,
                            Name = "Dálmata",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 47,
                            Name = "Doberman Pinscher",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 48,
                            Name = "Dogo Argentino",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 49,
                            Name = "Dogue de Bordeaux",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 50,
                            Name = "Bulldog Inglês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 51,
                            Name = "Setter Inglês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 52,
                            Name = "Spaniel de Springer Inglês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 53,
                            Name = "Retriever de Pelo Liso",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 54,
                            Name = "Bulldog Francês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 55,
                            Name = "Pastor Alemão",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 56,
                            Name = "Pointer Alemão de Pelo Curto",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 57,
                            Name = "Golden Retriever",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 58,
                            Name = "Dog Alemão",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 59,
                            Name = "Cão da Serra da Estrela",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 60,
                            Name = "Galgo Inglês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 61,
                            Name = "Havanês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 62,
                            Name = "Setter Irlandês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 63,
                            Name = "Lobero Irlandês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 64,
                            Name = "Jack Russell Terrier",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 65,
                            Name = "Chin Japonês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 66,
                            Name = "Keeshond",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 67,
                            Name = "Labrador Retriever",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 68,
                            Name = "Lhasa Apso",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 69,
                            Name = "Maltês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 70,
                            Name = "Mastim",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 71,
                            Name = "Pinscher Miniatura",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 72,
                            Name = "Terra Nova",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 73,
                            Name = "Elkhound Norueguês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 74,
                            Name = "Papillon",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 75,
                            Name = "Pequinês",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 76,
                            Name = "Pembroke Welsh Corgi",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 77,
                            Name = "Spitz Alemão",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 78,
                            Name = "Poodle",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 79,
                            Name = "Cão de Água Português",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 80,
                            Name = "Pug",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 81,
                            Name = "Rottweiler",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 82,
                            Name = "São Bernardo",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 83,
                            Name = "Samoyeda",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 84,
                            Name = "Schipperke",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 85,
                            Name = "Schnauzer",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 86,
                            Name = "Scottish Terrier",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 87,
                            Name = "Shiba Inu",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 88,
                            Name = "Shih Tzu",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 89,
                            Name = "SRD",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 90,
                            Name = "Husky Siberiano",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 91,
                            Name = "Staffordshire Bull Terrier",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 92,
                            Name = "Vizsla",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 93,
                            Name = "Weimaraner",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 94,
                            Name = "West Highland White Terrier",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 95,
                            Name = "Whippet",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 96,
                            Name = "Yorkshire Terrier",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 97,
                            Name = "Abissínio",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 98,
                            Name = "American Curl",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 99,
                            Name = "American Shorthair",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 100,
                            Name = "American Wirehair",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 101,
                            Name = "Angorá",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 102,
                            Name = "Balinês",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 103,
                            Name = "Bengal",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 104,
                            Name = "Birmanês",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 105,
                            Name = "Bobtail Americano",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 106,
                            Name = "Bobtail Japonês",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 107,
                            Name = "Bombay",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 108,
                            Name = "British Shorthair",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 109,
                            Name = "Burmês",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 110,
                            Name = "Chartreux",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 111,
                            Name = "Cornish Rex",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 112,
                            Name = "Devon Rex",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 113,
                            Name = "Egípcio Mau",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 114,
                            Name = "Europeu",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 115,
                            Name = "Exótico",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 116,
                            Name = "Himalaio",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 117,
                            Name = "Javanês",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 118,
                            Name = "Korat",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 119,
                            Name = "LaPerm",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 120,
                            Name = "Maine Coon",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 121,
                            Name = "Manx",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 122,
                            Name = "Mau Árabe",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 123,
                            Name = "Munchkin",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 124,
                            Name = "Norueguês da Floresta",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 125,
                            Name = "Ocicat",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 126,
                            Name = "Oriental",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 127,
                            Name = "Persa",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 128,
                            Name = "Peterbald",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 129,
                            Name = "Pixie-bob",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 130,
                            Name = "Ragdoll",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 131,
                            Name = "Russian Blue",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 132,
                            Name = "Savannah",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 133,
                            Name = "Scottish Fold",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 134,
                            Name = "Selkirk Rex",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 135,
                            Name = "Siamês",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 136,
                            Name = "Siberiano",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 137,
                            Name = "Singapura",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 138,
                            Name = "Snowshoe",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 139,
                            Name = "Somali",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 140,
                            Name = "Sphynx",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 141,
                            Name = "SRD",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 142,
                            Name = "Tonkineses",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 143,
                            Name = "Toyger",
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 144,
                            Name = "Turco Van",
                            SpeciesId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HexCode = "#FFFFFF",
                            Name = "Branco"
                        },
                        new
                        {
                            Id = 2,
                            HexCode = "#000000",
                            Name = "Preto"
                        },
                        new
                        {
                            Id = 3,
                            HexCode = "#C68E17",
                            Name = "Caramelo"
                        },
                        new
                        {
                            Id = 4,
                            HexCode = "#8B4513",
                            Name = "Marrom"
                        },
                        new
                        {
                            Id = 5,
                            HexCode = "#808080",
                            Name = "Cinza"
                        },
                        new
                        {
                            Id = 6,
                            HexCode = "#FFA500",
                            Name = "Laranja"
                        },
                        new
                        {
                            Id = 7,
                            HexCode = "#FFFDD0",
                            Name = "Creme"
                        },
                        new
                        {
                            Id = 8,
                            HexCode = "#7B3F00",
                            Name = "Chocolate"
                        },
                        new
                        {
                            Id = 9,
                            HexCode = "#D2691E",
                            Name = "Canela"
                        },
                        new
                        {
                            Id = 10,
                            HexCode = "#DEB887",
                            Name = "Fulvo"
                        },
                        new
                        {
                            Id = 11,
                            HexCode = "#CD5C5C",
                            Name = "Ruivo"
                        },
                        new
                        {
                            Id = 12,
                            HexCode = "#FA8072",
                            Name = "Salmão"
                        },
                        new
                        {
                            Id = 13,
                            HexCode = "#F5F5DC",
                            Name = "Bege"
                        },
                        new
                        {
                            Id = 14,
                            HexCode = "#8B4513",
                            Name = "Tigrado"
                        });
                });

            modelBuilder.Entity("Domain.Entities.MissingAlertComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MissingAlertId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MissingAlertId");

                    b.HasIndex("UserId");

                    b.ToTable("MissingAlertComments");
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("BreedId")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsCastrated")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNegativeToFivFelv")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNegativeToLeishmaniasis")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsVaccinated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("Pets", t =>
                        {
                            t.HasCheckConstraint("CK_Pets_Age_Enum", "\"Age\" BETWEEN 1 AND 4");

                            t.HasCheckConstraint("CK_Pets_Gender_Enum", "\"Gender\" BETWEEN 0 AND 2");

                            t.HasCheckConstraint("CK_Pets_Size_Enum", "\"Size\" BETWEEN 1 AND 4");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cachorro"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gato"
                        });
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("HasBeenDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasBeenEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasBeenRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeStampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("Domain.ValueObjects.FoundAnimalAlertImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("FoundAnimalAlertId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FoundAnimalAlertId");

                    b.ToTable("FoundAnimalAlertImages");
                });

            modelBuilder.Entity("Domain.ValueObjects.PetImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("PetImage");
                });

            modelBuilder.Entity("FoundAnimalAlertNotificationsUser", b =>
                {
                    b.Property<long>("FoundAnimalAlertNotificationsId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("FoundAnimalAlertNotificationsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("FoundAnimalAlertNotificationsUser");
                });

            modelBuilder.Entity("FoundAnimalUserPreferencesSpecies", b =>
                {
                    b.Property<Guid>("FoundAnimalUserPreferencesId")
                        .HasColumnType("uuid");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.HasKey("FoundAnimalUserPreferencesId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("FoundAnimalUserPreferencesSpecies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AdoptionUserPreferencesBreed", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("AdoptionUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Breed", null)
                        .WithMany()
                        .HasForeignKey("BreedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdoptionUserPreferencesColor", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("AdoptionUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdoptionUserPreferencesSpecies", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("AdoptionUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Species", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BreedFoundAnimalUserPreferences", b =>
                {
                    b.HasOne("Domain.Entities.Breed", null)
                        .WithMany()
                        .HasForeignKey("BreedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("FoundAnimalUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ColorFoundAnimalAlert", b =>
                {
                    b.HasOne("Domain.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Alerts.FoundAnimalAlert", null)
                        .WithMany()
                        .HasForeignKey("FoundAnimalAlertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ColorFoundAnimalUserPreferences", b =>
                {
                    b.HasOne("Domain.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("FoundAnimalUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ColorPet", b =>
                {
                    b.HasOne("Domain.Entities.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pet", null)
                        .WithMany()
                        .HasForeignKey("PetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AdoptionAlertComment", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.AdoptionAlert", "AdoptionAlert")
                        .WithMany()
                        .HasForeignKey("AdoptionAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdoptionAlert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.AdoptionReport", b =>
                {
                    b.HasOne("Domain.Entities.User", "Owner")
                        .WithMany("AdoptionReports")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.AdoptionAlert", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("AdoptionAlerts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("AdoptionAlerts")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Pet");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.FoundAnimalAlert", b =>
                {
                    b.HasOne("Domain.Entities.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedId");

                    b.HasOne("Domain.Entities.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Species");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.MissingAlert", b =>
                {
                    b.HasOne("Domain.Entities.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.Notifications.FoundAnimalAlertNotifications", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.FoundAnimalAlert", "FoundAnimalAlert")
                        .WithMany("FoundAnimalAlertNotifications")
                        .HasForeignKey("FoundAnimalAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoundAnimalAlert");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserFavorites.AdoptionFavorite", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.AdoptionAlert", "AdoptionAlert")
                        .WithMany("AdoptionFavorites")
                        .HasForeignKey("AdoptionAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("AdoptionFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdoptionAlert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("AdoptionUserPreferences")
                        .HasForeignKey("Domain.Entities.Alerts.UserPreferences.AdoptionUserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("FoundAnimalUserPreferences")
                        .HasForeignKey("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Breed", b =>
                {
                    b.HasOne("Domain.Entities.Species", "Species")
                        .WithMany("Breeds")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Entities.MissingAlertComment", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.MissingAlert", "MissingAlert")
                        .WithMany()
                        .HasForeignKey("MissingAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("MissingAlertComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MissingAlert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.HasOne("Domain.Entities.Breed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Species", "Species")
                        .WithMany("Pets")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Owner");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("Domain.Entities.UserMessage", b =>
                {
                    b.HasOne("Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.ValueObjects.FoundAnimalAlertImage", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.FoundAnimalAlert", "FoundAnimalAlert")
                        .WithMany("Images")
                        .HasForeignKey("FoundAnimalAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoundAnimalAlert");
                });

            modelBuilder.Entity("Domain.ValueObjects.PetImage", b =>
                {
                    b.HasOne("Domain.Entities.Pet", "Pet")
                        .WithMany("Images")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("FoundAnimalAlertNotificationsUser", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.Notifications.FoundAnimalAlertNotifications", null)
                        .WithMany()
                        .HasForeignKey("FoundAnimalAlertNotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoundAnimalUserPreferencesSpecies", b =>
                {
                    b.HasOne("Domain.Entities.Alerts.UserPreferences.FoundAnimalUserPreferences", null)
                        .WithMany()
                        .HasForeignKey("FoundAnimalUserPreferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Species", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Alerts.AdoptionAlert", b =>
                {
                    b.Navigation("AdoptionFavorites");
                });

            modelBuilder.Entity("Domain.Entities.Alerts.FoundAnimalAlert", b =>
                {
                    b.Navigation("FoundAnimalAlertNotifications");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Domain.Entities.Breed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("AdoptionAlerts");
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Domain.Entities.Species", b =>
                {
                    b.Navigation("Breeds");

                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Navigation("AdoptionAlerts");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("AdoptionFavorites");

                    b.Navigation("AdoptionReports");

                    b.Navigation("AdoptionUserPreferences");

                    b.Navigation("FoundAnimalUserPreferences");

                    b.Navigation("MissingAlertComments");
                });
#pragma warning restore 612, 618
        }
    }
}
